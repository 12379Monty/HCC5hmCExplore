[
["preproc.html", "Section 2 Preprocessing 2.1 Load the data 2.2 Normalize - \\(log_2\\) CPM 2.3 Analysis of coverage variability 2.4 Differential representation analysis", " Section 2 Preprocessing 2.1 Load the data The data that are available from NCBI GEO Series GSE112679 can be conveniently accessed through an R data package. Attaching the GSE112679 package makes the count data tables available as well as a gene annotation table and a sample description table. See GSE112679 R Data Package page. For the Cai et al. [1] model fitting and analysis, samples were separated into Train and Val-1 subsets. Val-2 was an external validation set. if (!(&quot;GSE112679&quot; %in% rownames(installed.packages()))) { if (!requireNamespace(&quot;devtools&quot;, quietly = TRUE)) { install.packages(&quot;devtools&quot;) } devtools::install_github(&quot;12379Monty/GSE112679&quot;) } library(GSE112679) with( sampDesc %&gt;% dplyr::filter(sampType == &quot;blood&quot;), table(outcome, trainValGroup, exclude = NULL) ) ## trainValGroup ## outcome Train Val-1 Val-2 ## Benign 253 132 3 ## CHB 190 96 0 ## Cirrhosis 73 33 0 ## HCC 335 809 60 ## Healthy 269 124 177 For this analysis, we will consider early stage cancer samples and healthy or benign samples from the Train or Val-1 subsets. sampDescA &lt;- sampDesc %&gt;% dplyr::filter(sampType == &quot;blood&quot; &amp; (trainValGroup %in% c(&quot;Train&quot;, &quot;Val-1&quot;)) &amp; ((outcome2 == &quot;BenignHealthy&quot;) | (outcome2 == &quot;HCC&quot; &amp; stage == &quot;Early&quot;))) %&gt;% dplyr::rename(group = outcome2) %&gt;% dplyr::arrange(group, sampID) # Recode group sampDescA$group &lt;- with(sampDescA, ifelse(group == &quot;BenignHealthy&quot;, &quot;Control&quot;, group)) with(sampDescA, table(group, exclude = NULL)) ## group ## Control HCC ## 778 555 The features are counts of reads captured by chemical labeling, and indicate the level of 5-hydroxymethylcytosines within each gene body. Cai et al. (2019), Li et al. (2017) and Song et al. (2017) [1–3] all analyze 5hmC gene body counts using standard RNA-Seq methodologies, and we will do the same here. Note that before conducting any substantive analyses, the data would normally be very carefully examined for any sign of quality variation between groups of samples. This analysis would integrate sample meta data - where and when were the blood samples collected - as well as library preparation and sequencing metrics in order to detect any sign of processing artifacts that may be present in the dataset. This is particularly important when dealing with blood samples as variable DNA quality degradation is a well known challenge that is encountered when dealing with such samples [4]. Although blood specimen handling protocols can be put in place to minimize quality variation [5], variability can never be completely eradicated, especially in the context of blood samples collected by different groups, working in different environments. The problem of variable DNA quality becomes paricularly pernicuous when it is compounded with a confounding factor that sneaks in when the control sample collection events are separated in time and space from the cancer sample collection events; an all too common occurence. As proper data QC requires an intimate familiarity with the details of data collection and processing, such a task cannot be untertaken here. We will simply run a minimal set of QC sanity checks to make sure that there are no apparent systematic effects in the data. # Note that unique sample identifier are stored # in the rownames of the sample description table # and in the column names of the feature count tables. featureCountsA &lt;- cbind(Train_featureCount, Val1_featureCount, Val2_featureCount)[,rownames(sampDescA)] Look at coverage - make sure there isn’t too much disparity of coverage across samples. groupCol &lt;- c(&quot;#F3C300&quot;, &quot;#875692&quot;) names(groupCol) &lt;- unique(sampDescA$group) par(mar = c(1, 3, 2, 1)) boxplot(log2(featureCountsA + 1), ylim = c(3, 11), staplewex = 0, # remove horizontal whisker lines staplecol = &quot;white&quot;, # just to be totally sure :) outline = F, # remove outlying points whisklty = 0, # remove vertical whisker lines las = 2, horizontal = F, xaxt = &quot;n&quot;, border = groupCol[sampDescA$group] ) legend(&quot;top&quot;, legend = names(groupCol), text.col = groupCol, ncol = 2, bty = &quot;n&quot;) # Add reference lines SampleMedian &lt;- apply(log2(featureCountsA + 1), 2, median) abline(h = median(SampleMedian), col = &quot;grey&quot;) axis(side = 2, at = round(median(SampleMedian), 1), las = 2, col = &quot;grey&quot;, line = -1, tick = F) Figure 2.1: Sample log2 count boxplots Look at relative log representation (RLR) (in the context of measuring the density of 5hmC marks in genes, we refer to representation as opposed to expression) - make sure the shapes of the distributions are not widely different. lcpm_mtx &lt;- edgeR::cpm(featureCountsA, log = T) median_vec &lt;- apply(lcpm_mtx, 1, median) RLR_mtx &lt;- sweep(lcpm_mtx, 1, median_vec, &quot;-&quot;) par(mar = c(1, 3, 2, 1)) boxplot(RLR_mtx, xlab = &quot;&quot;, ylim = c(-.6, .6), staplewex = 0, # remove horizontal whisker lines staplecol = &quot;white&quot;, # just to be totally sure :) outline = F, # remove outlying points whisklty = 0, # remove vertical whisker lines las = 2, horizontal = F, xaxt = &quot;n&quot;, border = groupCol[sampDescA$group] ) legend(&quot;top&quot;, legend = names(groupCol), text.col = groupCol, ncol = 2, bty = &quot;n&quot;) # Add group Q1, Q3 for (GRP in unique(sampDescA$group)) { group_ndx &lt;- which(sampDescA$group == GRP) group_Q1Q3_mtx &lt;- apply(RLR_mtx[, group_ndx], 2, quantile, prob = c(.25, .75)) abline(h = apply(group_Q1Q3_mtx, 1, median), col = groupCol[GRP], lwd = 2) } Figure 2.2: Sample RLR We note that the HCC samples have slightly more variable coverage distribution. A few samples are quite different. 2.2 Normalize - \\(log_2\\) CPM We will use \\(log_2\\) normalized counts per million as our indicator of 5hmC gene representation in our downstream analyses. We will first remove weakly represented genes, as is typically done when analyzing RNA-Seq data [6]. Before removing genes, let’s examine the shapes of the distributions. par(mar = c(1, 3, 2, 1)) plot(density(lcpm_mtx[, 1]), col = groupCol[sampDescA$group[1]], lwd = 2, ylim = c(0, .25), las = 2, main = &quot;&quot;, xlab = &quot;&quot; ) abline(v = 0, col = 3) # After verifying that there are no outliers can plot a random subset for (JJ in sample(2:ncol(lcpm_mtx), size = 100)) { den &lt;- density(lcpm_mtx[, JJ]) lines(den$x, den$y, col = groupCol[sampDescA$group[JJ]], lwd = 2) } # for(JJ legend(&quot;topright&quot;, legend = names(groupCol), text.col = groupCol, bty = &quot;n&quot;) Figure 2.3: Sample \\(log_2\\) CPM densities We notice many weakly represented genes as is the case with RNA-Seq data. Law et al. (2018) [6] point out that genes that are not expressed at a biologically meaningful level in any condition should be discarded to reduce the subset of genes to those that are of interest, and to reduce the number of tests carried out downstream when looking at differential expression. Using a nominal CPM value of 10, genes are deeemed to be represented if their expression is above this threshold, and not represented otherwise. Genes must be represented in at least 10 samples across the entire dataset to be retained for downstream analysis. Here, a CPM value of 10 means that a gene is represented if it has at least 29 reads in the sample with the lowest sequencing depth (library size 2.9 million). Note that the thresholds used here are arbitrary as there are no hard and fast rules to set thes by. Remove weakly represented genes. weak_flg &lt;- rowSums(edgeR::cpm(featureCountsA) &gt; CPM_THR) &lt; SAMP_THR cat(&quot;Removing&quot;, paste0(round(100 * mean(weak_flg), 1), &quot;%&quot;), &quot;of genes...\\n&quot;) ## Removing 28.1% of genes... featureCountsA &lt;- featureCountsA[!weak_flg, ] genes_annotA &lt;- genes_annot[rownames(featureCountsA), ] lcpm_mtx &lt;- edgeR::cpm(featureCountsA, log = T) dim(lcpm_mtx) ## [1] 13725 1333 Replot densities. par(mar = c(1, 3, 2, 1)) plot(density(lcpm_mtx[, 1]), col = groupCol[sampDescA$group[1]], lwd = 2, ylim = c(0, .25), las = 2, main = &quot;&quot;, xlab = &quot;&quot; ) abline(v = 0, col = 3) # After verifying that there are no outliers can plot random subset for (JJ in sample(2:ncol(lcpm_mtx), size = 100)) { den &lt;- density(lcpm_mtx[, JJ]) lines(den$x, den$y, col = groupCol[sampDescA$group[JJ]], lwd = 2) } # for(JJ legend(&quot;topright&quot;, legend = names(groupCol), text.col = groupCol, bty = &quot;n&quot;) Figure 2.4: Sample \\(log_2\\) CPM densities after removing weak genes As another sanity check, we will look at a multidimensional scaling plot of distances between gene expression profiles. We use plotMDS in limma package [7]), which plots samples on a two-dimensional scatterplot so that distances on the plot approximate the typical log2 fold changes between the samples. par(mfcol=c(1,2), mar=c(4,4,2,1), xpd=NA, oma=c(0,0,2,0)) # without loss of generality or sensitivity, sample 300 samples # this is simply a matter of convenience and to save computing time set.seed(1) samp_ndx &lt;- sample(1:ncol(lcpm_mtx), size=500) # Dim 1, 2 MDS.out &lt;- limma::plotMDS(lcpm_mtx[,samp_ndx], col=groupCol[sampDescA$group[samp_ndx]], pch=1) legend(&quot;topright&quot;, legend = names(groupCol), text.col = groupCol, bty = &quot;n&quot;) # Dim 3, 4 MDS.out &lt;- limma::plotMDS(lcpm_mtx[,samp_ndx], col=groupCol[sampDescA$group[samp_ndx]], pch=1, dim.plot=3:4) Figure 2.5: MDS plots of log-CPM values The MDS plot, which is analogous to a PCA plot adapted to gene exression data, does not indicate strong clustering of samples. The fanning pattern observed in the first two dimensions indicates that a few samples are drifting way from the core set, but in no particular direction. 2.3 Analysis of coverage variability We will use the methods described in Hart et al. (2013) [8] to characterize coverage variability in these data. These methods do not take multiple comparisons into account. Other tools for sample size calculatioon in RNA-Seq studies include Bi and Liu (2016) [9] Baccarella (2018) [10], Guo (2014) [11], Yu (2017) [12], Zhao (2018) [13]. Poplawski (2018) [14] evaluated RNA-seq sample size tools identified from a systematic search. They found the six evaluated tools provided widely different answers, which were strongly affected by fold change. More discussion of sample size: * Ein-Dor et al. (2006) [15]: Thousands of samples are needed to generate a robust gene list for predicting outcome in cancer. * Dobbin et al. (2007, 2008) [16,17] 2.4 Differential representation analysis word on GC content "]
]
