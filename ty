plot_cv_f <- function(cv_fit, Nzero=T, ...) {
 
 lambda.1se_p <- cv_fit$nzero[cv_fit$lambda==cv_fit$lambda.1se]
 lambda.min_p <- cv_fit$nzero[cv_fit$lambda==cv_fit$lambda.min]
 
 test_pred_1se_vec <- predict(
  cv_fit, 
  newx=test_lcpm_mtx, 
  s="lambda.1se",
  type="class"
 )
 test_pred_1se_error <- mean(test_pred_1se_vec!=test_group_vec)
 
 test_pred_min_vec <- predict(
  cv_fit, 
  newx=test_lcpm_mtx, 
  s="lambda.min",
  type="class"
 )
 test_pred_min_error <- mean(test_pred_min_vec!=test_group_vec)
 
  
 plot(
  log(cv_fit$lambda),
  cv_fit$cvm,
  pch=16,col="red",
  xlab='',ylab='',
  ...
 )
 abline(v=log(c(cv_fit$lambda.1se, cv_fit$lambda.min)))
 if(Nzero)
 axis(side=3, tick=F, at=log(cv_fit$lambda), 
  labels=cv_fit$nzero, line=-1
 )
 LL <- 2
 #mtext(side=1, outer=F, line=LL, "log(Lambda)")
 #LL <- LL+1
 mtext(side=1, outer=F, line=LL, paste(
  #ifelse(Nzero, paste("1se p =", lambda.1se_p),''),
  "1se: cv =", round(100*cv_fit$cvm[cv_fit$lambda==cv_fit$lambda.1se],1),
  "test =", round(100*test_pred_1se_error,1)
 ))
 LL <- LL+1
 mtext(side=1, outer=F, line=LL, paste(
  #ifelse(Nzero, paste("min p =", lambda.min_p),''),
  "min: cv =", round(100*cv_fit$cvm[cv_fit$lambda==cv_fit$lambda.min],1),
  "test =", round(100*test_pred_min_error,1)
 ))
 
}

